// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using billingOtt.Models.Vdc;

namespace billingOtt.DataVdc
{
    public partial class VdcContext : DbContext
    {
        public VdcContext()
        {
        }

        public VdcContext(DbContextOptions<VdcContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Account> Accounts { get; set; } = null!;
        public virtual DbSet<AccountTariff> AccountTariffs { get; set; } = null!;
        public virtual DbSet<Models.Vdc.Attribute> Attributes { get; set; } = null!;
        public virtual DbSet<AttributeLocale> AttributeLocales { get; set; } = null!;
        public virtual DbSet<Charge> Charges { get; set; } = null!;
        public virtual DbSet<Setting> Settings { get; set; } = null!;
        public virtual DbSet<Tariff> Tariffs { get; set; } = null!;
        public virtual DbSet<TariffAttribute> TariffAttributes { get; set; } = null!;
        public virtual DbSet<TariffLocale> TariffLocales { get; set; } = null!;

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseNpgsql("Host=localhost;Port=54331;Database=ott_vdc;Username=postgres;Password=", x => x.UseNodaTime());
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Account>(entity =>
            {
                entity.Property(e => e.PaymentMethod).HasComment("1 - pre paid 2 - post paid 3 - half paid");

                entity.Property(e => e.Period).HasComment("1 - hourly 2- daily 3- monthly");

                entity.Property(e => e.PersonType).HasComment("1 - individual 2- organization ");

                entity.Property(e => e.Type).HasComment("1 - usual 2 - privileged");
            });

            modelBuilder.Entity<AccountTariff>(entity =>
            {
                entity.HasKey(e => new { e.AccountNumber, e.TariffId })
                    .HasName("account_tariffs_pkey");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive).HasDefaultValueSql("false");

                entity.HasOne(d => d.AccountNumberAccountsAccountNumberNavigation)
                    .WithMany(p => p.AccountTariffs)
                    .HasForeignKey(d => d.AccountNumberAccountsAccountNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_accounts_to_account_tariffs");

                entity.HasOne(d => d.TariffIdTariffs)
                    .WithMany(p => p.AccountTariffs)
                    .HasForeignKey(d => d.TariffIdTariffsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_tariffs_to_account_tariffs");
            });

            modelBuilder.Entity<Models.Vdc.Attribute>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Type)
                    .HasDefaultValueSql("1")
                    .HasComment("1 - item 2 - option");

                entity.Property(e => e.Unit).HasComment("1 - GB 2 - core");
            });

            modelBuilder.Entity<AttributeLocale>(entity =>
            {
                entity.HasKey(e => new { e.AttributeId, e.Locale })
                    .HasName("attribute_locales_pkey");

                entity.HasOne(d => d.Attribute)
                    .WithMany(p => p.AttributeLocales)
                    .HasForeignKey(d => d.AttributeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_attributes_to_attribute_locales");
            });

            modelBuilder.Entity<Tariff>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedAt).HasDefaultValueSql("now()");

                entity.Property(e => e.Type)
                    .HasDefaultValueSql("1")
                    .HasComment("1 - default 2 - constructed");
            });

            modelBuilder.Entity<TariffAttribute>(entity =>
            {
                entity.HasKey(e => new { e.TariffId, e.AttributeId })
                    .HasName("tariff_attributes_pkey");

                entity.Property(e => e.Quantity).HasDefaultValueSql("1");

                entity.HasOne(d => d.AttributeIdAttributes)
                    .WithMany(p => p.TariffAttributes)
                    .HasForeignKey(d => d.AttributeIdAttributesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_attributes_to_tariff_attributes");

                entity.HasOne(d => d.TarifIdTariffs)
                    .WithMany(p => p.TariffAttributes)
                    .HasForeignKey(d => d.TarifIdTariffsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_tariffs_to_tariff_attributes");
            });

            modelBuilder.Entity<TariffLocale>(entity =>
            {
                entity.HasKey(e => new { e.TariffId, e.Locale })
                    .HasName("tariff_locales_pkey");

                entity.HasOne(d => d.TariffIdTariffsNavigation)
                    .WithMany(p => p.TariffLocales)
                    .HasForeignKey(d => d.TariffIdTariffs)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_tariffs_to_tariff_locales");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}