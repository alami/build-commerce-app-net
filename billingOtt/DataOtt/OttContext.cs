// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using billingOtt.Models.Ott;

namespace billingOtt.DataOtt
{
    public partial class OttContext : DbContext
    {
        public OttContext()
        {
        }

        public OttContext(DbContextOptions<OttContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Account> Accounts { get; set; } = null!;
        public virtual DbSet<AccountTariff> AccountTariffs { get; set; } = null!;
        public virtual DbSet<Category> Categories { get; set; } = null!;
        public virtual DbSet<CategoryLocale> CategoryLocales { get; set; } = null!;
        public virtual DbSet<ChannelTariff> ChannelTariffs { get; set; } = null!;
        public virtual DbSet<Charge> Charges { get; set; } = null!;
        public virtual DbSet<Content> Contents { get; set; } = null!;
        public virtual DbSet<ContentLocale> ContentLocales { get; set; } = null!;
        public virtual DbSet<Group> Groups { get; set; } = null!;
        public virtual DbSet<Setting> Settings { get; set; } = null!;
        public virtual DbSet<Tariff> Tariffs { get; set; } = null!;
        public virtual DbSet<TariffLocale> TariffLocales { get; set; } = null!;

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseNpgsql("Host=localhost;Port=54331;Database=ott_ott;Username=postgres;Password=", x => x.UseNodaTime());
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Account>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<AccountTariff>(entity =>
            {
                entity.HasKey(e => new { e.AccountNumber, e.TariffId })
                    .HasName("account_tariffs_pkey");

                entity.Property(e => e.Period)
                    .HasDefaultValueSql("1")
                    .HasComment("number of days");

                entity.HasOne(d => d.TarifIdTariffs)
                    .WithMany(p => p.AccountTariffs)
                    .HasForeignKey(d => d.TarifIdTariffsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_tariffs_to_account_tariffs");
            });

            modelBuilder.Entity<Category>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<CategoryLocale>(entity =>
            {
                entity.HasKey(e => new { e.CategoryId, e.Locale })
                    .HasName("category_locales_pkey");

                entity.HasOne(d => d.CategoryIdCategories)
                    .WithMany(p => p.CategoryLocales)
                    .HasForeignKey(d => d.CategoryIdCategoriesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_categories_to_category_locales");
            });

            modelBuilder.Entity<ChannelTariff>(entity =>
            {
                entity.HasKey(e => new { e.TariffId, e.ChannelId })
                    .HasName("channel_tariffs_pkey");

                entity.HasOne(d => d.ChannelIdChannels)
                    .WithMany(p => p.ChannelTariffs)
                    .HasForeignKey(d => d.ChannelIdChannelsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_contents_to_channel_tariffs");

                entity.HasOne(d => d.TariffIdTariffs)
                    .WithMany(p => p.ChannelTariffs)
                    .HasForeignKey(d => d.TariffIdTariffsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_tariffs_to_channel_tariffs");
            });

            modelBuilder.Entity<Charge>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<Content>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Type).HasComment("channel = 1");

                entity.HasOne(d => d.CategoryIdCategories)
                    .WithMany(p => p.Contents)
                    .HasForeignKey(d => d.CategoryIdCategoriesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_categories_to_contents");

                entity.HasOne(d => d.GroupIdGroups)
                    .WithMany(p => p.Contents)
                    .HasForeignKey(d => d.GroupIdGroupsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_groups_to_contents");

                entity.HasOne(d => d.ParentIdContents)
                    .WithMany(p => p.InverseParentIdContents)
                    .HasForeignKey(d => d.ParentIdContentsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_contents_to_contents");
            });

            modelBuilder.Entity<ContentLocale>(entity =>
            {
                entity.HasKey(e => new { e.ContnetId, e.Locale })
                    .HasName("content_locales_pkey");

                entity.HasOne(d => d.ContentIdContens)
                    .WithMany(p => p.ContentLocales)
                    .HasForeignKey(d => d.ContentIdContensId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_contents_to_content_locales");
            });

            modelBuilder.Entity<Group>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<Tariff>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<TariffLocale>(entity =>
            {
                entity.HasKey(e => new { e.TariffId, e.Locale })
                    .HasName("tariff_locales_pkey");

                entity.HasOne(d => d.TariffIdTariffs)
                    .WithMany(p => p.TariffLocales)
                    .HasForeignKey(d => d.TariffIdTariffsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_tariffs_to_tariff_locales");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}